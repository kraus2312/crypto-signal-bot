from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMIN_ID, TRIAL_HOURS
from datetime import datetime, timedelta
import json
import os
from services.signals import generate_signal

DATA_FILE = "database/users.json"
HISTORY_FILE = "database/signals.json"
USER_STATE = {}

def load_users():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_users(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

def save_signal_to_history(user_id, signal):
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r") as f:
            history = json.load(f)
    else:
        history = {}
    if str(user_id) not in history:
        history[str(user_id)] = []
    signal["timestamp"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    history[str(user_id)].append(signal)
    with open(HISTORY_FILE, "w") as f:
        json.dump(history, f, indent=2)

def has_access(user_id):
    users = load_users()
    if str(user_id) in users:
        if users[str(user_id)].get("banned"):
            return False
        access_until = users[str(user_id)].get("access_until")
        if access_until and datetime.strptime(access_until, "%Y-%m-%d %H:%M:%S") > datetime.now():
            return True
    return False

def register(dp: Dispatcher):
    @dp.message_handler(commands=["start"])
    async def start_handler(message: types.Message):
        user_id = str(message.from_user.id)
        users = load_users()
        if user_id not in users:
            trial_end = datetime.now() + timedelta(hours=TRIAL_HOURS)
            users[user_id] = {
                "username": message.from_user.username,
                "access_until": trial_end.strftime("%Y-%m-%d %H:%M:%S"),
                "banned": False
            }
            save_users(users)
            await message.answer(f"üëã –ü—Ä–∏–≤—ñ—Ç! –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏ –¥–æ {trial_end.strftime('%Y-%m-%d %H:%M:%S')}")
        elif has_access(user_id):
            await message.answer("‚úÖ –£ —Ç–µ–±–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø.")
        else:
            await message.answer("‚õî –ü—Ä–æ–±–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–ø–∏—à–∏ –∞–¥–º—ñ–Ω—É @admin_username")
            return
        await show_coin_selection(message)

    @dp.message_handler(commands=["history"])
    async def history_command(message: types.Message):
    history = get_user_history(message.from_user.id)
    if not history:
        return await message.answer("üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤.")
    text = 'üïì <b>–í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏:</b>\n\n'
    for item in reversed(history):
        text += f"üïì {item['timestamp'][:16]}\n<code>{item['text']}</code>\n"
        if item.get("image"):
            await message.answer_photo(open(item["image"], "rb"))
        text += "\n"
    await message.answer(text, parse_mode="HTML")
    async def history_handler(message: types.Message):
        user_id = str(message.from_user.id)
        if not has_access(user_id):
            await message.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
            return
        if not os.path.exists(HISTORY_FILE):
            await message.answer("üì≠ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
            return
        with open(HISTORY_FILE, "r") as f:
            history = json.load(f)
        signals = history.get(user_id, [])
        if not signals:
            await message.answer("üì≠ –Ü—Å—Ç–æ—Ä—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.")
            return
        last_signals = signals[-5:]  # –æ—Å—Ç–∞–Ω–Ω—ñ 5
        msg = "üïì –û—Å—Ç–∞–Ω–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏:

"
        for s in reversed(last_signals):
            msg += f"{s['timestamp']} | {s['symbol']} {s['direction']} @ {s['price']} | TF: {s['interval']} | üéØ {s['probability']}%
"
        await message.answer(msg)

    async def show_coin_selection(message):
        keyboard = InlineKeyboardMarkup(row_width=3)
        for coin in ["BTCUSDT", "ETHUSDT", "SOLUSDT", "XRPUSDT", "PEPEUSDT", "TONUSDT"]:
            keyboard.insert(InlineKeyboardButton(coin, callback_data=f"coin_{coin}"))
        await message.answer("üîç –û–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É:", reply_markup=keyboard)

    @dp.callback_query_handler(lambda c: c.data.startswith("coin_"))
    async def select_coin(call: types.CallbackQuery):
        coin = call.data.replace("coin_", "")
        USER_STATE[call.from_user.id] = {"symbol": coin}
        keyboard = InlineKeyboardMarkup(row_width=4)
        for tf in ["15m", "1h", "4h", "1d"]:
            keyboard.insert(InlineKeyboardButton(tf, callback_data=f"time_{tf}"))
        await call.message.answer(f"üïí –û–±—Ä–∞–Ω–æ: {coin}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=keyboard)

    @dp.callback_query_handler(lambda c: c.data.startswith("time_"))
    async def select_time(call: types.CallbackQuery):
        tf = call.data.replace("time_", "")
        USER_STATE[call.from_user.id]["interval"] = tf
        keyboard = InlineKeyboardMarkup(row_width=3)
        for lev in [1, 5, 10, 20, 50, 100]:
            keyboard.insert(InlineKeyboardButton(f"{lev}x", callback_data=f"lev_{lev}"))
        await call.message.answer("üìê –û–±–µ—Ä–∏ –ø–ª–µ—á–µ:", reply_markup=keyboard)

    @dp.callback_query_handler(lambda c: c.data.startswith("lev_"))
    async def select_leverage(call: types.CallbackQuery):
        lev = int(call.data.replace("lev_", ""))
        USER_STATE[call.from_user.id]["leverage"] = lev
        keyboard = InlineKeyboardMarkup(row_width=4)
        for risk in [0.5, 1, 2, 3]:
            keyboard.insert(InlineKeyboardButton(f"{risk}%", callback_data=f"risk_{risk}"))
        await call.message.answer("‚öñÔ∏è –û–±–µ—Ä–∏ —Ä–∏–∑–∏–∫:", reply_markup=keyboard)

    @dp.callback_query_handler(lambda c: c.data.startswith("risk_"))
    async def generate(call: types.CallbackQuery):
        risk = float(call.data.replace("risk_", ""))
        uid = call.from_user.id
        USER_STATE[uid]["risk"] = risk

        if not has_access(uid):
            await call.message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            return

        s = USER_STATE[uid]
        signal = generate_signal(s["symbol"], s["interval"], s["leverage"], s["risk"])

        save_signal_to_history(uid, signal)

        msg = (
            f"{'üü¢' if signal['direction']=='LONG' else 'üî¥'} üìà {signal['direction']} Signal: {signal['symbol']} ({signal['interval']})
"
            f"üíµ –¶—ñ–Ω–∞: ${signal['price']}
"
            f"üìä RSI: {signal['rsi']} | üìà MACD: {signal['macd']} | üìè EMA: {signal['ema']}
"
            f"üéØ –í—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å: {signal['probability']}% ‚úÖ
"
            f"üìê –ü–ª–µ—á–µ: {signal['leverage']}x

"
            f"üéØ TP1: ${signal['take_profits'][0]}
"
            f"üéØ TP2: ${signal['take_profits'][1]}
"
            f"üéØ TP3: ${signal['take_profits'][2]}
"
            f"üõ°Ô∏è SL: ${signal['stop_loss']}

"
            f"‚öñÔ∏è –†–∏–∑–∏–∫: {signal['risk_percent']}% ‚Üí üíº –ü–æ–∑–∏—Ü—ñ—è: ${signal['position_size']}
"
            f"üìà –ü—Ä–æ—Ñ—ñ—Ç: +${signal['potential_profit']} | üìâ –ó–±–∏—Ç–æ–∫: -${signal['potential_loss']}"
        )
        await call.message.answer(msg)

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile
from services.formatter import format_signal
import asyncio

async def send_trade_signal(message: types.Message, signal: dict):
    from services.plotter import generate_candlestick_image
from services.history import add_signal_to_history, get_user_history
from services.access_control import has_access
from services.strategy import analyze_signal  # —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫—É –º–∏ –¥–æ–¥–∞–º–æ

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–≤—ñ—á–∫–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞
    image_path = generate_candlestick_image(signal)

    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª—É
    text = format_signal(signal)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞—Ä—Ç–∏–Ω–∫–æ—é
    with open(image_path, "rb") as photo:
        await message.answer_photo(photo=photo, caption=text)

from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from services.formatter import format_signal
from services.plotter import generate_candlestick_image
from services.history import add_signal_to_history, get_user_history
from services.access_control import has_access
from services.strategy import analyze_signal
from aiogram import types
import asyncio

class SignalFSM(StatesGroup):
    choosing_symbol = State()
    choosing_interval = State()
    choosing_leverage = State()

@dp.message_handler(commands=["start"])
async def start_signal(message: types.Message):
    if not has_access(message.from_user.id):
        return await message.answer("‚ùå –í–∞—à –ø—Ä–æ–±–Ω–∏–π –¥–æ—Å—Ç—É–ø –∑–∞–≤–µ—Ä—à–∏–≤—Å—è. –ê–∫—Ç–∏–≤—É–π—Ç–µ –ø—ñ–¥–ø–∏—Å–∫—É, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.")
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –û–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª—É üëá")
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
    coins = [
        "BTC/USDT", "ETH/USDT", "BNB/USDT", "SOL/USDT", "XRP/USDT", "DOGE/USDT",
        "ADA/USDT", "AVAX/USDT", "DOT/USDT", "TRX/USDT", "LINK/USDT", "MATIC/USDT",
        "LTC/USDT", "SHIB/USDT", "BCH/USDT", "TON/USDT", "UNI/USDT", "ICP/USDT",
        "NEAR/USDT", "ETC/USDT", "FIL/USDT", "APT/USDT", "INJ/USDT", "HBAR/USDT",
        "STX/USDT", "OP/USDT", "ARB/USDT", "SUI/USDT", "LDO/USDT", "EGLD/USDT",
        "RNDR/USDT", "IMX/USDT", "TIA/USDT", "FTM/USDT", "CRO/USDT", "MKR/USDT",
        "PEPE/USDT", "GRT/USDT", "QNT/USDT", "AAVE/USDT", "XLM/USDT", "SEI/USDT",
        "RUNE/USDT", "FLOW/USDT", "SNX/USDT", "DYDX/USDT", "COMP/USDT", "ZIL/USDT",
        "WOO/USDT", "1INCH/USDT"
    ]
    for coin in coins:
        markup.add(KeyboardButton(coin))
    await message.answer("üîç –û–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç—É:", reply_markup=markup)
    await SignalFSM.choosing_symbol.set()

@dp.message_handler(state=SignalFSM.choosing_symbol)
async def choose_interval(message: types.Message, state: FSMContext):
    await state.update_data(symbol=message.text)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for tf in ["15m", "1h", "4h", "1d"]:
        markup.add(KeyboardButton(tf))
    await message.answer("üïí –û–±–µ—Ä—ñ—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=markup)
    await SignalFSM.choosing_interval.set()

@dp.message_handler(state=SignalFSM.choosing_interval)
async def choose_leverage(message: types.Message, state: FSMContext):
    await state.update_data(interval=message.text)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for lev in ["1x", "5x", "10x", "20x", "50x", "100x"]:
        markup.add(KeyboardButton(lev))
    await message.answer("üìê –û–±–µ—Ä—ñ—Ç—å –ø–ª–µ—á–µ:", reply_markup=markup)
    await SignalFSM.choosing_leverage.set()

@dp.message_handler(state=SignalFSM.choosing_leverage)
async def finish_and_send_signal(message: types.Message, state: FSMContext):
    await state.update_data(leverage=int(message.text.replace("x", "")))
    data = await state.get_data()

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª
    signal = analyze_signal(data["symbol"], data["interval"], data["leverage"])

    # –ì—Ä–∞—Ñ—ñ–∫ + —Ç–µ–∫—Å—Ç
    image_path = generate_candlestick_image(signal)
    text = format_signal(signal)

    with open(image_path, "rb") as photo:
        await message.answer_photo(photo=photo, caption=text)

    await state.finish()

from services.history import add_signal_to_history, get_user_history
from services.access_control import check_user_access, load_access_data
from datetime import datetime

@dp.message_handler(commands=["help"])
async def help_command(message: types.Message):
    await message.answer(
        "‚ùì <b>–î–æ–ø–æ–º–æ–≥–∞</b>

"
        "‚Ä¢ /start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞
"
        "‚Ä¢ /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
"
        "‚Ä¢ /subscription ‚Äî —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø—É
"
        "‚Ä¢ /history ‚Äî –æ—Å—Ç–∞–Ω–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏
",
        parse_mode="HTML"
    )

@dp.message_handler(commands=["subscription"])
async def subscription_command(message: types.Message):
    data = load_access_data()
    user_id = str(message.from_user.id)
    if user_id not in data:
        return await message.answer("‚õî –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
    access = data[user_id]
    text = f"üìÖ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: <code>{access['start']}</code>"
    if "premium_until" in access:
        text += f"
üíé –ü—Ä–µ–º—ñ—É–º –¥–æ: <code>{access['premium_until']}</code>"
    else:
        text += "
üß™ –í–∏ –Ω–∞ –ø—Ä–æ–±–Ω–æ–º—É –¥–æ—Å—Ç—É–ø—ñ."
    await message.answer(text, parse_mode="HTML")

@dp.message_handler(commands=["history"])
async def history_command(message: types.Message):
    history = get_user_history(message.from_user.id)
    if not history:
        return await message.answer("üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤.")
    text = 'üïì <b>–í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏:</b>\n\n'
    for item in reversed(history):
        text += f"üïì {item['timestamp'][:16]}\n<code>{item['text']}</code>\n"
        if item.get("image"):
            await message.answer_photo(open(item["image"], "rb"))
        text += "\n"
    await message.answer(text, parse_mode="HTML")
async def history_command(message: types.Message):
    await message.answer("üìä –Ü—Å—Ç–æ—Ä—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£ –º–∞–π–±—É—Ç–Ω—å–æ–º—É –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–≤–æ—ó –æ—Å—Ç–∞–Ω–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏.")